/****************************************************************************
 *   FileName    : SHA204_Config.h
 *   Description :
 ****************************************************************************
*
*   Copyright (c) Nowada, Inc.
*   ALL RIGHTS RESERVED
*
*	Created: 2011-11-28
*  	Author: Jackson Meng
****************************************************************************/

#ifndef ATSHA204_DEVICE_CONFIGURATION_H_
#define ATSHA204_DEVICE_CONFIGURATION_H_

/*!
 *	*** DEVICE INFORMATION  ***
 *
 *	The first 16 bytes of the configuration region holds non-modifiable device information.
 */

/*!
 *  Device Operation Modes and Parameters
 *
 *	Configure the I2C Address, Temperature sensor offset, OTP mode, and Selector Mode bytes
 */

//													 { I2C_Address,	TempOffset,	   OTPmode,	SelectorMode};
const UINT8 DEVICE_MODES[4] = {	      0xC9,       0x00,       0x55,         0x00};


/*!
 *  *** SLOT CONFIGURATION ***
 *
 * Configure the access restrictions governing each slot
 *
 */
//													       { LSB,  MSB,    LSB,  MSB};
const UINT8 SLOT_CONFIG_00_01[WRITE_BUFFER_SIZE_SHORT] = {0x8F, 0xCF,   0x8F, 0xCF};  /* Access rights for slots 0 and 1   */
const UINT8 SLOT_CONFIG_02_03[WRITE_BUFFER_SIZE_SHORT] = {0x8F, 0xCF,   0x8F, 0xCF};  /* Access rights for slots 2 and 3   */
const UINT8 SLOT_CONFIG_04_05[WRITE_BUFFER_SIZE_SHORT] = {0xC0, 0x40,   0xC1, 0x42};  /* Access rights for slots 4 and 5   */
const UINT8 SLOT_CONFIG_06_07[WRITE_BUFFER_SIZE_SHORT] = {0xCF, 0x4F,   0xCF, 0x4F};  /* Access rights for slots 6 and 7   */
const UINT8 SLOT_CONFIG_08_09[WRITE_BUFFER_SIZE_SHORT] = {0xCF, 0x4F,   0xCF, 0x4F};  /* Access rights for slots 8 and 9   */
const UINT8 SLOT_CONFIG_10_11[WRITE_BUFFER_SIZE_SHORT] = {0xCF, 0x4F,   0xCF, 0x4F};  /* Access rights for slots 10 and 11 */
const UINT8 SLOT_CONFIG_12_13[WRITE_BUFFER_SIZE_SHORT] = {0xCF, 0x4F,   0x0D, 0x0D};  /* Access rights for slots 12 and 13 */
const UINT8 SLOT_CONFIG_14_15[WRITE_BUFFER_SIZE_SHORT] = {0x02, 0x02,   0x80, 0x20};  /* Access rights for slots 14 and 15 */

/*!
 *	*** Cconfugre USE FLAGS AND UPDATE COUNT bytes ***
 *
 * Use flags and update counts apply restrictions to enable limits on key usage.
 *	- For each 4-byte word:
 *		- Byte 0 is the UseFlag byte for the lower slot
 *		- Byte 1 is the UpdateCount byte for the lower slot
 *		- Byte 2 is the UseFlag byte for the upper slot
 *		- Byte 3 is the UpdateCount byte for the upper slot
 */
const UINT8 SLOT_0_1_USE_UPDATE[WRITE_BUFFER_SIZE_SHORT] = {0xFF, 0xFF,  0xFF, 0xFF};
const UINT8 SLOT_2_3_USE_UPDATE[WRITE_BUFFER_SIZE_SHORT] = {0xFF, 0xFF,  0xFF, 0xFF};
const UINT8 SLOT_4_5_USE_UPDATE[WRITE_BUFFER_SIZE_SHORT] = {0xFF, 0xFF,  0xFF, 0xFF};
const UINT8 SLOT_6_7_USE_UPDATE[WRITE_BUFFER_SIZE_SHORT] = {0xFF, 0xFF,  0xFF, 0xFF};


/*!
 *	***	LAST KEY USE ***
 *
 *	Control limited use for KeyID 15.  Factory defaults are 0xFF
 *
 */
const UINT8 LAST_KEY_USE [LAST_KEY_USE_BYTE_SIZE] = {	0xFF, 0xFF, 0xFF, 0xFF,		// Bytes 68 - 71
														0xFF, 0xFF, 0xFF, 0xFF,		// Bytes 72 - 75
														0xFF, 0xFF, 0xFF, 0xFF,		// Bytes 76 - 79
														0xFF, 0xFF, 0xFF, 0xFF		// Bytes 80 - 83
													};

/*!
 *	***	Configure USER EXTRA and SELECTOR bytes ***
 *
 *	- Byte 0 configures UserExtra
 *	- Byte 1 configures Selector
 *	- Bytes 2 and 3 are ignored as they can only be modified via LOCK commands.
 *
 * These bytes are modifiable only through UpdateExtra and Lock commands only
 */

/*!
 *	*** INITIAL OTP CONTENT ***
 *
 *	512 Bits in total
 */
 const UINT8 OTP[2 * WRITE_BUFFER_SIZE_LONG] = {	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
													0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
													0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
													0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
													0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
													0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
													0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
													0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
												};

/*!
 *	*** INITIAL SLOT CONTENT ***
 *
 *	The initial slot content can be keys or data depending on custom security configuration.
 *
 * The slots in this example are populated with values easy to remember for easy illustration.
 * Atmel strongly advices use of random values preferably from the high quality on-chip RNG
 * (random number generator) for initial key values.
 *
 */

const static UINT8 GPA_Seed[16][2] =
{
{0xC6,0x3E},{0x0D,0x6D},{0x2B,0x4E},{0xB6,0x0C},
{0xDB,0x1B},{0x3A,0x75},{0xB3,0x3D},{0x2E,0xBD},
{0x08,0x8B},{0x8F,0x29},{0x01,0x3C},{0x82,0x32},
{0xF6,0x91},{0x02,0xBF},{0x0A,0xCE},{0xFB,0xB2}
};

const static UINT8 GPD_BUF [16][8] =
{
{0x34, 0x31, 0x51, 0xB8, 0x84, 0x6D, 0x57, 0x6E},
{0x33, 0xD3, 0x76, 0xAB, 0x37, 0x5F, 0xDB, 0x49},
{0xEB, 0x45, 0xD7, 0x00, 0x26, 0x94, 0x38, 0xEC},
{0x87, 0x5F, 0x53, 0xE7, 0xF2, 0x48, 0x46, 0x4B},
{0x5E, 0xDF, 0x57, 0x00, 0xF9, 0xDC, 0xA9, 0x13},
{0x83, 0x86, 0x24, 0x9E, 0x0F, 0x42, 0x3B, 0x25},
{0xA9, 0x46, 0xA3, 0x8A, 0xC9, 0x83, 0x09, 0x48},
{0x24, 0x7B, 0x1D, 0xCD, 0x7F, 0x47, 0x14, 0xCF},
{0xD9, 0xF2, 0x7D, 0xEF, 0x61, 0xA9, 0xF7, 0xBB},
{0x84, 0x6B, 0x50, 0xA3, 0x6D, 0xEE, 0xCE, 0xE7},
{0x2E, 0xBD, 0x42, 0x59, 0x0E, 0x08, 0xFA, 0x5A},
{0xC9, 0xDE, 0xE5, 0xC9, 0x27, 0xC7, 0x97, 0x81},
{0xDF, 0xD9, 0x1E, 0xE2, 0xEE, 0xC6, 0x14, 0xD0},
{0x44, 0x7D, 0x26, 0x8C, 0x1A, 0x0D, 0xB3, 0x20},
{0x9D, 0x03, 0x65, 0x1A, 0x22, 0xCA, 0x78, 0xA3},
{0xD5, 0xD2, 0x99, 0xBD, 0x41, 0xC0, 0x02, 0xCC}

};

#endif /* ATSHA204_DEVICE_CONFIGURATION_H_ */